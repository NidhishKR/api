AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  TagName:
    Type: String
    Description: TagName of your Infrastructure.
Resources:
  NginxAPI:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Description: "Demo API for Nginx application"
      Name: "NginxAPI"
  ApiGatewayCloudWatchLogsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action: ['sts:AssumeRole']
  ApiGatewayCloudWatchLogsPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "ApiGatewayLogsPolicy"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: ['logs:*']
            Resource: '*'
      Roles: [!Ref 'ApiGatewayCloudWatchLogsRole']
  ApiGatewayAccount:
    Type: "AWS::ApiGateway::Account"
    DependsOn: ApiGatewayCloudWatchLogsPolicy
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
          - "ApiGatewayCloudWatchLogsRole"
          - "Arn"
  NginxAPIStage:
    Type: "AWS::ApiGateway::Stage"
    DependsOn: ApiGatewayAccount
    Properties:
      StageName: "Staging"
      Description: "Stage for staging environment"
      RestApiId:
        Ref: "NginxAPI"
      DeploymentId:
        Ref: "APIDeployment"
      MethodSettings:
        -
          ResourcePath: "/"
          HttpMethod: "GET"
          MetricsEnabled: "true"
          DataTraceEnabled: "true"
  APIDeployment:
    DependsOn: NginxMethod
    Type: "AWS::ApiGateway::Deployment"
    Properties:
      RestApiId:
        Ref: "NginxAPI"
      Description: "Demo deployment of Nginx application"
      StageName: "DummyStage"
  NginxResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId:
        Ref: "NginxAPI"
      ParentId:
        Fn::GetAtt:
          - "NginxAPI"
          - "RootResourceId"
      PathPart: "Nginx"
  NginxMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId:
        Ref: "NginxAPI"
      ResourceId:
        Fn::GetAtt:
          - "NginxAPI"
          - "RootResourceId"
      HttpMethod: "GET"
      AuthorizationType: "NONE"
      ApiKeyRequired: "true"
      Integration:
        Type: "HTTP"
        IntegrationHttpMethod: "GET"
        Uri: "https://stormpath.com/blog/tutorial-build-rest-api-mobile-apps-using-node-js"
        IntegrationResponses:
          - StatusCode: 200
      MethodResponses:
        - StatusCode: 200
  UsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    Properties:
      ApiStages:
      - ApiId: !Ref 'NginxAPI'
        Stage: !Ref 'NginxAPIStage'
      Description: Customer NginxAPI's usage plan
      Quota:
        Limit: 5000
        Period: MONTH
      Throttle:
        BurstLimit: 200
        RateLimit: 100
      UsagePlanName: NginxAPI
  ApiKey:
    Type: "AWS::ApiGateway::ApiKey"
    DependsOn:
      - "UsagePlan"
      - "NginxMethod"
      - "APIDeployment"
    Properties:
      Name: "NginxAPI"
      Description: "CloudFormation API Key NginxAPI"
      Enabled: "true"
      StageKeys:
        - RestApiId:
            Ref: "NginxAPI"
          StageName: "DummyStage"
Outputs:
  NginxURL:
    Value: !Join ['', ["https://", !Ref 'NginxAPI', ".execute-api.", !Ref 'AWS::Region', ".amazonaws.com"]]
